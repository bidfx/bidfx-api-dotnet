name: Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.8.2)'
        required: true
        type: string
      next_version:
        description: 'Next development version (e.g., 1.8.3) - leave empty for auto-increment'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Validate input version format
      run: |
        if [[ ! "${{ github.event.inputs.release_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Release version must be in format x.y.z (e.g., 1.8.2)"
          exit 1
        fi
        if [[ -n "${{ github.event.inputs.next_version }}" && ! "${{ github.event.inputs.next_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Next version must be in format x.y.z (e.g., 1.8.3)"
          exit 1
        fi
    
    - name: Check for uncommitted changes
      run: |
        if ! git diff-index --quiet HEAD --; then
          echo "Error: Git has uncommitted changes."
          exit 1
        fi
    
    - name: Calculate next version
      id: versions
      run: |
        RELEASE_VERSION="${{ github.event.inputs.release_version }}"
        
        if [[ -n "${{ github.event.inputs.next_version }}" ]]; then
          NEXT_VERSION="${{ github.event.inputs.next_version }}"
        else
          # Auto-increment patch version
          if [[ $RELEASE_VERSION =~ ^([0-9]+\.[0-9]+\.)([0-9]+)$ ]]; then
            PREFIX="${BASH_REMATCH[1]}"
            PATCH="${BASH_REMATCH[2]}"
            NEXT_VERSION="${PREFIX}$((PATCH + 1))"
          else
            echo "Error: Could not parse release version for auto-increment"
            exit 1
          fi
        fi
        
        echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
        echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $RELEASE_VERSION"
        echo "Next version: $NEXT_VERSION"
    
    - name: Update version for release
      run: |
        CSPROJ_FILE="BidFX.Public.API/BidFX.Public.API.csproj"
        RELEASE_VERSION="${{ steps.versions.outputs.release_version }}"
        
        # Backup original file
        cp "$CSPROJ_FILE" "$CSPROJ_FILE.bak"
        
        # Update versions in csproj file
        sed -i "s|<AssemblyVersion>.*</AssemblyVersion>|<AssemblyVersion>$RELEASE_VERSION</AssemblyVersion>|g" "$CSPROJ_FILE"
        sed -i "s|<FileVersion>.*</FileVersion>|<FileVersion>$RELEASE_VERSION</FileVersion>|g" "$CSPROJ_FILE"
        
        # Verify the build works
        dotnet build API.sln --configuration Release
        
        # Commit the release version
        git add "$CSPROJ_FILE"
        git commit -m "prepare release $RELEASE_VERSION"
    
    - name: Create release tag
      run: |
        RELEASE_VERSION="${{ steps.versions.outputs.release_version }}"
        git tag "public-api-dotnet-$RELEASE_VERSION"
    
    - name: Update to next development version
      run: |
        CSPROJ_FILE="BidFX.Public.API/BidFX.Public.API.csproj"
        NEXT_VERSION="${{ steps.versions.outputs.next_version }}"
        
        # Update to next development version
        sed -i "s|<AssemblyVersion>.*</AssemblyVersion>|<AssemblyVersion>$NEXT_VERSION</AssemblyVersion>|g" "$CSPROJ_FILE"
        sed -i "s|<FileVersion>.*</FileVersion>|<FileVersion>$NEXT_VERSION</FileVersion>|g" "$CSPROJ_FILE"
        
        # Commit the next development version
        git add "$CSPROJ_FILE"
        git commit -m "prepare for next development iteration"
    
    - name: Push changes and tags
      run: |
        git push origin ${{ github.ref_name }}
        git push origin --tags
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "public-api-dotnet-${{ steps.versions.outputs.release_version }}"
        release_name: "BidFX Public API .NET v${{ steps.versions.outputs.release_version }}"
        body: |
          ## Release v${{ steps.versions.outputs.release_version }}
          
          This release was created automatically by GitHub Actions.
        draft: false
        prerelease: false
